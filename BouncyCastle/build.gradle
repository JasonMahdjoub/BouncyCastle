buildscript {
   repositories {
       maven {
         url "https://plugins.gradle.org/m2/"
       }
   }

   dependencies {
        classpath "net.saliman:gradle-cobertura-plugin:2.2.8"
   }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

def Properties props = new Properties()
def propFile = file('gradle.properties')
def artifactory_Url="https://mahdjoub.net/artifactory"
def user=""
def pwd=""
if (propFile.canRead())
{
    props.load(new FileInputStream(propFile))

    
	if (props!=null && props.containsKey('artifactory_contextUrl'))
		artifactory_Url="${artifactory_contextUrl}"	
	if (props!=null && props.containsKey('artifactory_user'))
		user="${artifactory_user}"	
	if (props!=null && props.containsKey('artifactory_password'))
		pwd="${artifactory_password}"	
}

allprojects {
   apply plugin: 'java'
   apply plugin: 'idea'
   apply plugin: 'net.saliman.cobertura'
   apply plugin: 'maven-publish'
   group='org.bouncycastle'
   
	if (propFile.canRead())
	{
	
	    if (props!=null && props.containsKey('jdk'))
	    {
			compileJava.options.fork = true
			compileJava.options.forkOptions.executable = "${jdk}/bin/javac"
			compileJava.options.bootClasspath=fileTree(include: ['*.jar'], dir: "${jdk}/jre/lib").join(File.pathSeparator)
			compileJava.options.extensionDirs = "${jdk}/jre/lib/ext/"
		
			compileTestJava.options.fork = true
			compileTestJava.options.forkOptions.executable = "${jdk}/bin/javac"
			compileTestJava.options.bootClasspath=fileTree(include: ['*.jar'], dir: "${jdk}/jre/lib").join(File.pathSeparator)
			compileTestJava.options.extensionDirs = "${jdk}/jre/lib/ext/"
		}
	}
	
   repositories {
       mavenCentral()
   }

   dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.11'
        // Cobertura declares a dependency on the slf4j API, so we need to supply
        // a runtime implementation to avoid NoClassDefFoundErrors
        testRuntime "org.slf4j:slf4j-log4j12:1.7.5"
        testRuntime "log4j:log4j:1.2.17"
   }
   
   
	
	sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

ext {
    bcTestDataHome = file('core/src/test/data').absolutePath
}

task printProperties << {
    println bcTestDataHome
}

subprojects {
	if (propFile.canRead())
	{
	    props.load(new FileInputStream(propFile))
	
	    if (props!=null && props.containsKey('jdk'))
	    {
			compileJava.options.fork = true
			compileJava.options.forkOptions.executable = "${jdk}/bin/javac"
			compileJava.options.bootClasspath=fileTree(include: ['*.jar'], dir: "${jdk}/jre/lib").join(File.pathSeparator)
			compileJava.options.extensionDirs = "${jdk}/jre/lib/ext/"
		
			compileTestJava.options.fork = true
			compileTestJava.options.forkOptions.executable = "${jdk}/bin/javac"
			compileTestJava.options.bootClasspath=fileTree(include: ['*.jar'], dir: "${jdk}/jre/lib").join(File.pathSeparator)
			compileTestJava.options.extensionDirs = "${jdk}/jre/lib/ext/"
		}
	}

    apply plugin: 'eclipse'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    version = '1.59c'
	
    test {
        systemProperty 'bc.test.data.home', bcTestDataHome

        filter {
            includeTestsMatching "*AllTests"
        }
    }
    task sourcesJar(type: Jar, dependsOn: classes) {
	    classifier = 'sources'
	    from sourceSets.main.allSource
	    from "../../LICENSE"
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
	    classifier = 'javadoc'
	    from javadoc.destinationDir
	    from "../../LICENSE"
	}
	publishing {
		publications {
		      maven(MavenPublication) {
		        groupId 'org.bouncycastle'
            	artifactId 'bc-'+project.name

		        pom.withXml {
		          asNode().appendNode("name", project.name)
		          asNode().appendNode("description", project.description)
		        }
				from components.java
            	artifact sourcesJar
            	artifact javadocJar		        
	      	  }
	    }
		repositories {
	        maven {
	            credentials {
	              username "${user}"
	              password "${pwd}"
	            }
	            url "${artifactory_Url}/DistriMind-Public"
	     	}
    	}
    }	      

}

test.dependsOn([':core:test', ':prov:test', ':tls:test', ':pkix:test', ':mail:test', 'pg:test'])

cobertura {
   coverageDirs = [
        "${rootProject.projectDir}/core/build/classes/main",
        "${rootProject.projectDir}/mail/build/classes/main",
        "${rootProject.projectDir}/pg/build/classes/main",
        "${rootProject.projectDir}/pkix/build/classes/main",
        "${rootProject.projectDir}/prov/build/classes/main",
        "${rootProject.projectDir}/tls/build/classes/main",
   ]
   coverageSourceDirs = [
        "${rootProject.projectDir}/core/src/main/java",
        "${rootProject.projectDir}/mail/src/main/java",
        "${rootProject.projectDir}/pg/src/main/java",
        "${rootProject.projectDir}/pkix/src/main/java",
        "${rootProject.projectDir}/prov/src/main/java",
        "${rootProject.projectDir}/tls/src/main/java",
   ]
   coverageMergeDatafiles = [
          file("${rootProject.projectDir}/core/build/cobertura/cobertura.ser"),
          file("${rootProject.projectDir}/mail/build/cobertura/cobertura.ser"),
          file("${rootProject.projectDir}/pg/build/cobertura/cobertura.ser"),
          file("${rootProject.projectDir}/pkix/build/cobertura/cobertura.ser"),
          file("${rootProject.projectDir}/prov/build/cobertura/cobertura.ser"),
          file("${rootProject.projectDir}/tls/build/cobertura/cobertura.ser"),
   ]
   auxiliaryClasspath += files("${rootProject.projectDir}/core/build/classes/main")
   coverageFormats = ['html', 'xml']
   coverageReportDir = new File("${rootProject.projectDir}/build/reports/cobertura")
}

