buildscript {
   repositories {
       maven {
         url "https://plugins.gradle.org/m2/"
       }
   }

}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

Properties props = new Properties()
def propFile = new File(project.getProjectDir().getParentFile(), 'credentials.properties')
def artifactoryUrl="https://artifactory.distri-mind.fr:443/artifactory"
def sonatypeStagingUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
def artifactoryUser=""
def artifactoryPwd=""
def sonatypeUser=""
def sonatypePwd=""

if (propFile.canRead())
{
	props.load(new FileInputStream(propFile))


	if (props!=null && props.containsKey('artifactory_contextUrl'))
		artifactoryUrl=props.get("artifactory_contextUrl")
	if (props!=null && props.containsKey('artifactory_user'))
		artifactoryUser=props.get("artifactory_user")
	if (props!=null && props.containsKey('artifactory_password'))
		artifactoryPwd=props.get("artifactory_password")
	if (props!=null && props.containsKey('sonatype_staging_url'))
		sonatypeStagingUrl=props.get("sonatype_staging_url")
	if (props!=null && props.containsKey('sonatype_user'))
		sonatypeUser=props.get("sonatype_user")
	if (props!=null && props.containsKey('sonatype_password'))
		sonatypePwd=props.get("sonatype_password")
}
apply plugin: 'java-library'
def JavaVersionSource=8
def JavaVersionTarget=8
sourceCompatibility = JavaVersionSource
targetCompatibility= JavaVersionTarget



allprojects {
   apply plugin: 'java'
   apply plugin: 'idea'
   apply plugin: 'maven-publish'
   apply plugin: 'signing'
   group='com.distrimind.bouncycastle'

	compileJava.options.compilerArgs.addAll(['--release', JavaVersionTarget] as Collection<? extends String>)
	if (project.hasProperty('javaHomeVersion') && JavaVersionTarget.toFloat()>1.8)
		javadoc.options.addStringOption("html5", "-quiet")


	repositories {


	   	maven {
			url "${artifactoryUrl}/gradle-release/"
			if (artifactoryUser!="")
			{
				credentials {
					username "${artifactoryUser}"
					password "${artifactoryPwd}"
				}
			}
	   	} 
	}

   dependencies {
        testImplementation group: 'junit', name: 'junit', version: '4.13.2'
   }
	tasks.withType(JavaExec) {
		jvmArgs = ['-Xms8g', '-Xmx8g']
	}

}


ext {
    bcTestDataHome = file('core/src/test/data').absolutePath
}

task printProperties {
	doLast {
		println bcTestDataHome
	}
}
subprojects {
	tasks.withType(JavaExec) {
		jvmArgs = ['-Xms8g', '-Xmx8g']
	}
	if (propFile.canRead())
	{
	    props.load(new FileInputStream(propFile))
	}

	apply plugin: 'idea'
	apply plugin: 'eclipse'

	JavaVersion current = JavaVersion.current();
	if (current.compareTo(JavaVersion.VERSION_1_8) <= 0)
	{
		ext.vmrange='jdk15to18'
		sourceCompatibility = 1.5
		targetCompatibility = 1.5
	}
	else
	{
		compileJava.options.compilerArgs.addAll(['--release', JavaVersionTarget] as Collection<? extends String>)
		if (project.hasProperty('javaHomeVersion') && JavaVersionTarget.toFloat()>1.8)
			javadoc.options.addStringOption("html5", "-quiet")
		ext.vmrange='jdk18on'
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
	}

	version = '1.69'

	test {
		systemProperty 'bc.test.data.home', bcTestDataHome

		filter {
			includeTestsMatching "AllTest*"
		}
	}
	task sourcesJar(type: Jar, dependsOn: classes) {
		archiveClassifier.set("sources")
	    from sourceSets.main.allSource
	    from "../../LICENSE"
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		archiveClassifier.set("javadoc")
	    from javadoc.destinationDir
	    from "../../LICENSE"
	}
	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				artifact sourcesJar
				artifact javadocJar
				pom {
					name = 'BouncyCastle recompiled By DistriMind'
					description = 'Encryption tools'
					url = 'https://github.com/JasonMahdjoub/BouncyCastle'
					organization {
						name = 'DistriMind'
						url = 'https://github.com/JasonMahdjoub'
					}
					issueManagement {
						system = 'GitHub'
						url = 'https://github.com/JasonMahdjoub/BouncyCastle/issues'
					}
					scm {
						connection = 'https://github.com/JasonMahdjoub/BouncyCastle'
						developerConnection = connection
						url = connection
					}
					licenses {
						license {
							name = 'The Bouncy Castle License'
							url = 'http://www.bouncycastle.org'
						}
					}

				}
			}
		}
		repositories {
			maven {
				credentials {
					username "${artifactoryUser}"
					password "${artifactoryPwd}"
				}
				url "${artifactoryUrl}/DistriMind-Public"
			}
			maven {
				credentials {
					username "${sonatypeUser}"
					password "${sonatypePwd}"
				}
				url "${sonatypeStagingUrl}"
			}
		}
	}
	signing {
		useGpgCmd()
		sign configurations.archives
		sign publishing.publications.mavenJava
	}

	javadoc {
		if(JavaVersion.current().isJava9Compatible()) {
			options.addBooleanOption('html5', true)
		}
	}
}
test.dependsOn([':core:test', ':prov:test', ':pkix:test', ':mail:test', 'pg:test'/*, ':tls:test'*/])

