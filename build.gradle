buildscript {
   repositories {
       maven {
         url "https://plugins.gradle.org/m2/"
       }
   }

}
plugins {
	//id "io.spring.nohttp" version "0.0.10"
	id "jacoco"
	id "net.ltgt.errorprone" version "3.0.0"
}
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

Properties props = new Properties()
def propFile = new File(project.getProjectDir().getParentFile(), 'credentials.properties')
def artifactoryUrl="https://artifactory.distri-mind.fr:443/artifactory"
def sonatypeStagingUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
def artifactoryUser=""
def artifactoryPwd=""
def sonatypeUser=""
def sonatypePwd=""

if (propFile.canRead())
{
	props.load(new FileInputStream(propFile))


	if (props!=null && props.containsKey('artifactory_contextUrl'))
		artifactoryUrl=props.get("artifactory_contextUrl")
	if (props!=null && props.containsKey('artifactory_user'))
		artifactoryUser=props.get("artifactory_user")
	if (props!=null && props.containsKey('artifactory_password'))
		artifactoryPwd=props.get("artifactory_password")
	if (props!=null && props.containsKey('sonatype_staging_url'))
		sonatypeStagingUrl=props.get("sonatype_staging_url")
	if (props!=null && props.containsKey('sonatype_user'))
		sonatypeUser=props.get("sonatype_user")
	if (props!=null && props.containsKey('sonatype_password'))
		sonatypePwd=props.get("sonatype_password")
}
apply plugin: 'java-library'
def JavaVersionSource=11
def JavaVersionTarget=11
sourceCompatibility = JavaVersionSource
targetCompatibility= JavaVersionTarget

allprojects {
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'maven-publish'
	apply plugin: 'signing'
	apply plugin: 'jacoco'
	apply plugin: 'net.ltgt.errorprone'
   group='com.distrimind.bouncycastle'

	compileJava.options.compilerArgs.addAll(['--release', JavaVersionTarget] as Collection<? extends String>)
	if (project.hasProperty('javaHomeVersion') && JavaVersionTarget.toFloat()>1.8)
		javadoc.options.addStringOption("html5", "-quiet")


	repositories {


	   	maven {
			url "${artifactoryUrl}/gradle-release/"
			if (artifactoryUser!="")
			{
				credentials {
					username "${artifactoryUser}"
					password "${artifactoryPwd}"
				}
			}
	   	} 
	}

   dependencies {
        testImplementation group: 'junit', name: 'junit', version: '4.13.2'
   }
	tasks.withType(JavaExec) {
		jvmArgs = ['-Xms8g', '-Xmx8g']
	}
	tasks.withType(JavaCompile).configureEach {
		options.errorprone {
			// Checks that cannot be enabled because implementing their suggestions
			// would break backward compatibility.
			check('ComparableType', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('JdkObsolete', net.ltgt.gradle.errorprone.CheckSeverity.OFF)

			// ERROR
			check('BadShiftAmount', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('BanJNDI', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('BoxedPrimitiveEquality', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('ChainingConstructorIgnoresParameter', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('ConstantOverflow', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('EqualsHashCode', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('EqualsNull', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('HashtableContains', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('ReturnValueIgnored', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('SelfEquals', net.ltgt.gradle.errorprone.CheckSeverity.OFF)

			// WARNING
			check('AlmostJavadoc', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('AlreadyChecked', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('AmbiguousMethodReference', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('AssertionFailureIgnored', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('BadImport', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('BadInstanceof', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('BoxedPrimitiveConstructor', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('CanIgnoreReturnValueSuggester', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('CatchAndPrintStackTrace', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('CatchFail', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('ClassNewInstance', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('CompareToZero', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('DefaultCharset', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('DoubleBraceInitialization', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('EmptyBlockTag', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('EmptyCatch', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('EqualsGetClass', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('EqualsIncompatibleType', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('ErroneousBitwiseExpression', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('FallThrough', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('FloatingPointLiteralPrecision', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('HidingField', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('InconsistentCapitalization', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('InconsistentHashCode', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('IncrementInForLoopAndHeader', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('InputStreamSlowMultibyteRead', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('InstanceOfAndCastMatchWrongType', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('IntLongMath', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('InvalidBlockTag', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('InvalidInlineTag', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('InvalidParam', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('InvalidThrows', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('IsInstanceIncompatibleType', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('IsInstanceOfClass', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('JavaLangClash', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('JavaUtilDate', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('MalformedInlineTag', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('MathAbsoluteRandom', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('MissingCasesInEnumSwitch', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('MissingFail', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('MissingImplementsComparable', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('MissingOverride', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('MissingSummary', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('MixedMutabilityReturnType', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('ModifiedButNotUsed', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('MutablePublicArray', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('NarrowCalculation', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('NarrowingCompoundAssignment', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('NestedInstanceOfConditions', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('NonAtomicVolatileUpdate', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('NonOverridingEquals', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('OperatorPrecedence', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('ProtectedMembersInFinalClass', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('ReferenceEquality', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('ReturnFromVoid', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('ShortCircuitBoolean', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('StringSplitter', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('SynchronizeOnNonFinalField', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('ThreadLocalUsage', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('ThreadPriorityCheck', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('TypeParameterUnusedInFormals', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('UndefinedEquals', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('UnescapedEntity', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('UnicodeEscape', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('UnnecessaryParentheses', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('UnrecognisedJavadocTag', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('UnsynchronizedOverridesSynchronized', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('UnusedMethod', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('UnusedNestedClass', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('UnusedVariable', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('UseCorrectAssertInTests', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
			check('VariableNameSameAsType', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
		}
	}

}



ext {
    bcTestDataHome = file('core/src/test/data').absolutePath
}

task printProperties {
	doLast {
		println bcTestDataHome
	}
}
subprojects {
	tasks.withType(JavaExec) {
		jvmArgs = ['-Xms8g', '-Xmx8g']
	}
	if (propFile.canRead())
	{
	    props.load(new FileInputStream(propFile))
	}

	apply plugin: 'idea'
	apply plugin: 'eclipse'

	dependencies {
		errorprone "com.google.errorprone:error_prone_core:2.15.0"
	}

	JavaVersion current = JavaVersion.current();
	if (current <= JavaVersion.VERSION_1_8)
	{
		ext.vmrange='jdk15to18'
		sourceCompatibility = 1.5
		targetCompatibility = 1.5
	}
	else
	{
		compileJava.options.compilerArgs.addAll(['--release', JavaVersionTarget] as Collection<? extends String>)
		if (project.hasProperty('javaHomeVersion') && JavaVersionTarget.toFloat()>1.8)
			javadoc.options.addStringOption("html5", "-quiet")
		ext.vmrange='jdk18on'
		sourceCompatibility = 11
		targetCompatibility = 11
	}

	version = '1.73'

	task testFull(type:Test) {
		systemProperties = [
				'bc.test.data.home': bcTestDataHome,
				'test.full':'true'
		]
		systemProperty 'bc.test.data.home', bcTestDataHome
		maxHeapSize = "8192m"

		finalizedBy jacocoTestReport

		filter {
			includeTestsMatching "AllTest*"
			if (project.hasProperty('excludeTests')) {
				excludeTestsMatching "${excludeTests}"
			}
		}
	}

	test {
		/*testLogging {
			events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
		}*/
		systemProperty 'bc.test.data.home', bcTestDataHome
		maxHeapSize = "8192m"

		filter {
			includeTestsMatching "AllTest*"
			if (project.hasProperty('excludeTests')) {
				excludeTestsMatching "${excludeTests}"
			}
		}
	}


	jacocoTestReport {
		dependsOn test // tests are required to run before generating the report
	}

	jacoco {
		reportsDirectory =  layout.buildDirectory.dir("jacoco")
	}

	jar {
		manifest {
			attributes('Implementation-Title': project.name,
					'Implementation-Version': project.version)
		}
		from "../LICENSE"
	}


	task sourcesJar(type: Jar, dependsOn: classes) {
		manifest {
			attributes('Implementation-Title': project.name,
					'Implementation-Version': project.version)
		}
		archiveClassifier.set("sources")
	    from sourceSets.main.allSource
	    from "../LICENSE"
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		manifest {
			attributes('Implementation-Title': project.name,
					'Implementation-Version': project.version)
		}
		archiveClassifier.set("javadoc")
	    from javadoc.destinationDir
	    from "../LICENSE"
	}
	artifacts {
		archives jar
		archives sourcesJar
		archives javadocJar
	}
	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				artifact sourcesJar
				artifact javadocJar
				pom {
					name = 'BouncyCastle recompiled By DistriMind'
					description = 'Encryption tools'
					url = 'https://github.com/JasonMahdjoub/BouncyCastle'
					developers {
						developer {
							id = 'jmahdjoub'
							name = 'Jason Mahdjoub'
							email = 'jason.mahdjoub@distri-mind.fr'
							organization = 'DistriMind'
							roles.add('Entrepreneur')
							roles.add('Developer')
						}
					}
					organization {
						name = 'DistriMind'
						url = 'https://github.com/JasonMahdjoub'
					}
					issueManagement {
						system = 'GitHub'
						url = 'https://github.com/JasonMahdjoub/BouncyCastle/issues'
					}
					scm {
						connection = 'https://github.com/JasonMahdjoub/BouncyCastle'
						developerConnection = connection
						url = connection
					}
					licenses {
						license {
							name = 'The Bouncy Castle License'
							url = 'https://www.bouncycastle.org'
						}
					}

				}
			}
		}
		repositories {
			maven {
				credentials {
					username "${artifactoryUser}"
					password "${artifactoryPwd}"
				}
				url "${artifactoryUrl}/DistriMind-Public"
			}
			maven {
				credentials {
					username "${sonatypeUser}"
					password "${sonatypePwd}"
				}
				url "${sonatypeStagingUrl}"
			}
		}
	}
	signing {
		useGpgCmd()
		sign configurations.archives
		sign publishing.publications.mavenJava
	}

	javadoc {
		if(JavaVersion.current().isJava9Compatible()) {
			options.addBooleanOption('html5', true)
		}
	}
}
test.dependsOn([':core:test', ':prov:test', ':pkix:test', /*':mail:test',*/ 'pg:test'/*, ':tls:test'*/])

