
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc).tap {
			configureEach {
				options.addStringOption('Xdoclint:none', '-quiet')
			}
		}
	}
}

Properties props = new Properties()
def propFile = new File(project.getProjectDir().getParentFile(), 'credentials.properties')
def artifactoryUrl="https://artifactory.distri-mind.fr:443/artifactory"
def sonatypeStagingUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
def artifactoryUser=""
def artifactoryPwd=""
def sonatypeUser=""
def sonatypePwd=""

if (propFile.canRead())
{
	props.load(new FileInputStream(propFile))


	if (props!=null && props.containsKey('artifactory_contextUrl'))
		artifactoryUrl=props.get("artifactory_contextUrl")
	if (props!=null && props.containsKey('artifactory_user'))
		artifactoryUser=props.get("artifactory_user")
	if (props!=null && props.containsKey('artifactory_password'))
		artifactoryPwd=props.get("artifactory_password")
	if (props!=null && props.containsKey('sonatype_staging_url'))
		sonatypeStagingUrl=props.get("sonatype_staging_url")
	if (props!=null && props.containsKey('sonatype_user'))
		sonatypeUser=props.get("sonatype_user")
	if (props!=null && props.containsKey('sonatype_password'))
		sonatypePwd=props.get("sonatype_password")
}

def javaVersion = JavaVersion.VERSION_11


allprojects {
	//apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'idea'
	apply plugin: 'maven-publish'
	apply plugin: 'signing'
	java {

		sourceCompatibility = javaVersion
		targetCompatibility = javaVersion
	}
   group='com.distrimind.bouncycastle'

	compileJava.options.compilerArgs.addAll(['--release', javaVersion] as Collection<? extends String>)
	javadoc.options.addStringOption("html5", "-quiet")


	repositories {


	   	maven {
			url "${artifactoryUrl}/gradle-release/"
			if (artifactoryUser!="")
			{
				credentials {
					username "${artifactoryUser}"
					password "${artifactoryPwd}"
				}
			}
	   	} 
	}

   dependencies {
        testImplementation group: 'junit', name: 'junit', version: '4.13.2'
   }
	tasks.withType(JavaExec).configureEach {
		jvmArgs = ['-Xms8g', '-Xmx8g']
	}


}



ext {
    bcTestDataHome = file('core/src/test/data').absolutePath
}

tasks.register('printProperties') {
	doLast {
		println bcTestDataHome
	}
}
subprojects {
	tasks.withType(JavaExec).configureEach {
		jvmArgs = ['-Xms8g', '-Xmx8g']
	}
	if (propFile.canRead())
	{
	    props.load(new FileInputStream(propFile))
	}

	apply plugin: 'idea'
	apply plugin: 'eclipse'


	compileJava.options.compilerArgs.addAll(['--release', javaVersion] as Collection<? extends String>)
	javadoc.options.addStringOption("html5", "-quiet")
	ext.vmrange='jdk18on'

	java {
		sourceCompatibility = javaVersion
		targetCompatibility = javaVersion
	}

	version = '1.78.1'

	tasks.register('testFull', Test) {
		systemProperties = [
				'bc.test.data.home': bcTestDataHome,
				'test.full'        : 'true'
		]
		systemProperty 'bc.test.data.home', bcTestDataHome
		maxHeapSize = "8192m"

		finalizedBy jacocoTestReport

		filter {
			includeTestsMatching "AllTest*"
			if (project.hasProperty('excludeTests')) {
				excludeTestsMatching "${excludeTests}"
			}
		}
	}

	test {
		forkEvery = 1;
		maxParallelForks = 1;
		systemProperty 'bc.test.data.home', bcTestDataHome
		maxHeapSize = "8192m"
		testLogging.showStandardStreams = true

		filter {
			includeTestsMatching "AllTest*"
			if (project.hasProperty('excludeTests')) {
				excludeTestsMatching "${excludeTests}"
			}
		}
	}



	jar {
		manifest {
			attributes('Implementation-Title': project.name,
					'Implementation-Version': project.version)
		}

		manifest.attributes('Multi-Release': 'false')
		manifest.attributes('Bundle-Name': jar.archiveBaseName)
		manifest.attributes('Bundle-SymbolicName': jar.archiveBaseName)
		manifest.attributes('Bundle-RequiredExecutionEnvironment': 'JavaSE-1.11')


		from('../LICENSE') {
			rename { fileName ->
				"LICENSE-BouncyCastle"
			}
		}
	}


	tasks.register('sourcesJar', Jar) {
		dependsOn classes
		manifest {
			attributes('Implementation-Title': project.name,
					'Implementation-Version': project.version)
		}
		archiveClassifier.set("sources")
		from sourceSets.main.allSource
		from('../LICENSE') {
			rename { fileName ->
				"LICENSE-BouncyCastle"
			}
		}
	}

	tasks.register('javadocJar', Jar) {
		dependsOn javadoc
		manifest {
			attributes('Implementation-Title': project.name,
					'Implementation-Version': project.version)
		}
		archiveClassifier.set("javadoc")
		from javadoc.destinationDir
		from('../LICENSE') {
			rename { fileName ->
				"LICENSE-BouncyCastle"
			}
		}
	}
	artifacts {
		archives jar
		archives sourcesJar
		archives javadocJar
	}
	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				artifact sourcesJar
				artifact javadocJar
				pom {
					name = 'BouncyCastle recompiled By DistriMind'
					description = 'Encryption tools'
					url = 'https://git.distri-mind.fr/BouncyCastle'
					organization {
						name = 'DistriMind'
						url = 'https://github.com/JasonMahdjoub'
					}
					issueManagement {
						system = 'GitHub'
						url = 'https://github.com/JasonMahdjoub/BouncyCastle/issues'
					}
					scm {
						connection = 'https://git.distri-mind.fr/BouncyCastle'
						developerConnection = connection
						url = connection
					}
					licenses {
						license {
							name = 'The Bouncy Castle License'
							url = 'https://www.bouncycastle.org'
						}
					}

				}
			}
		}
		repositories {
			maven {
				credentials {
					username "${artifactoryUser}"
					password "${artifactoryPwd}"
				}
				url "${artifactoryUrl}/DistriMind-Public"
			}
			maven {
				credentials {
					username "${sonatypeUser}"
					password "${sonatypePwd}"
				}
				url "${sonatypeStagingUrl}"
			}
		}
	}
	signing {
		useGpgCmd()
		sign configurations.archives
		sign publishing.publications.mavenJava
	}

	javadoc {
		if(JavaVersion.current().isJava9Compatible()) {
			options.addBooleanOption('html5', true)
		}
	}
}
test.dependsOn([':core:test', ':prov:test', /*':pkix:test', 'pg:test', ':tls:test', 'mls:test', 'mail:test', 'jmail:test'*/])
